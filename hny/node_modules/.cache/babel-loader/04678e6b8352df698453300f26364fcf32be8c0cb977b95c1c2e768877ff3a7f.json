{"ast":null,"code":"import { clamp, executeOnSingleOrMultiple, getLogger, isArray, isNumber, itemFromArray, itemFromSingleOrMultiple } from \"tsparticles-engine\";\nimport { getNoteFrequency } from \"./utils\";\nfunction initImage(data) {\n  const img = document.createElement(\"img\"),\n    {\n      clickCb,\n      container,\n      display,\n      iconOptions,\n      margin,\n      options,\n      pos,\n      rightOffsets\n    } = data,\n    {\n      width,\n      path,\n      svg\n    } = iconOptions;\n  setIconStyle(img, pos.top + margin, pos.right - (margin * (rightOffsets.length + 1) + width + rightOffsets.reduce((a, b) => a + b, 0)), display, options.fullScreen.zIndex + 1, width, margin);\n  img.src = path ?? (svg ? `data:image/svg+xml;base64,${btoa(svg)}` : \"\");\n  const parent = container.canvas.element?.parentNode || document.body;\n  parent.append(img);\n  img.addEventListener(\"click\", clickCb);\n  return img;\n}\nfunction removeImage(image) {\n  if (!image) {\n    return;\n  }\n  image.remove();\n}\nfunction setIconStyle(icon, top, left, display, zIndex, width, margin) {\n  icon.style.userSelect = \"none\";\n  icon.style.webkitUserSelect = \"none\";\n  icon.style.position = \"absolute\";\n  icon.style.top = `${top + margin}px`;\n  icon.style.left = `${left - margin - width}px`;\n  icon.style.display = display;\n  icon.style.zIndex = `${zIndex + 1}`;\n}\nexport class SoundsInstance {\n  constructor(container, engine) {\n    this._addBuffer = audioCtx => {\n      const buffer = audioCtx.createBufferSource();\n      this._audioSources.push(buffer);\n      return buffer;\n    };\n    this._addOscillator = audioCtx => {\n      const oscillator = audioCtx.createOscillator();\n      this._audioSources.push(oscillator);\n      return oscillator;\n    };\n    this._initEvents = () => {\n      const container = this._container,\n        soundsOptions = container.actualOptions.sounds;\n      if (!soundsOptions?.enable || !container.canvas.element) {\n        return;\n      }\n      for (const event of soundsOptions.events) {\n        const cb = async args => {\n          if (this._container !== args.container) {\n            return;\n          }\n          if (!this._container || this._container.muted || this._container.destroyed) {\n            executeOnSingleOrMultiple(event.event, item => {\n              this._engine.removeEventListener(item, cb);\n            });\n            return;\n          }\n          if (event.filter && !event.filter(args)) {\n            return;\n          }\n          if (event.audio) {\n            this._playBuffer(itemFromSingleOrMultiple(event.audio));\n          } else if (event.melodies) {\n            const melody = itemFromArray(event.melodies);\n            if (melody.melodies.length) {\n              await Promise.allSettled(melody.melodies.map(m => this._playNote(m.notes, 0, melody.loop)));\n            } else {\n              await this._playNote(melody.notes, 0, melody.loop);\n            }\n          } else if (event.notes) {\n            const note = itemFromArray(event.notes);\n            await this._playNote([note], 0, false);\n          }\n        };\n        executeOnSingleOrMultiple(event.event, item => {\n          this._engine.addEventListener(item, cb);\n        });\n      }\n    };\n    this._mute = () => {\n      const container = this._container;\n      if (!container.audioContext) {\n        return;\n      }\n      for (const source of this._audioSources) {\n        this._removeAudioSource(source);\n      }\n      if (this._gain) {\n        this._gain.disconnect();\n      }\n      container.audioContext.close();\n      container.audioContext = undefined;\n      this._engine.dispatchEvent(\"soundsMuted\", {\n        container: this._container\n      });\n    };\n    this._playBuffer = audio => {\n      const audioBuffer = this._audioMap.get(audio.source);\n      if (!audioBuffer) {\n        return;\n      }\n      const audioCtx = this._container.audioContext;\n      if (!audioCtx) {\n        return;\n      }\n      const source = this._addBuffer(audioCtx);\n      source.loop = audio.loop;\n      source.buffer = audioBuffer;\n      source.connect(this._gain ?? audioCtx.destination);\n      source.start();\n    };\n    this._playFrequency = async (frequency, duration) => {\n      if (!this._container.audioContext || !this._gain) {\n        return;\n      }\n      const oscillator = this._addOscillator(this._container.audioContext);\n      oscillator.connect(this._gain);\n      oscillator.type = \"sine\";\n      oscillator.frequency.value = frequency;\n      oscillator.start();\n      return new Promise(resolve => {\n        setTimeout(() => {\n          this._removeAudioSource(oscillator);\n          resolve();\n        }, duration);\n      });\n    };\n    this._playMuteSound = () => {\n      const container = this._container;\n      if (!container.audioContext) {\n        return;\n      }\n      const gain = container.audioContext.createGain();\n      gain.connect(container.audioContext.destination);\n      gain.gain.value = 0;\n      const oscillator = container.audioContext.createOscillator();\n      oscillator.connect(gain);\n      oscillator.type = \"sine\";\n      oscillator.frequency.value = 1;\n      oscillator.start();\n      setTimeout(() => {\n        oscillator.stop();\n        oscillator.disconnect();\n        gain.disconnect();\n      });\n    };\n    this._playNote = async (notes, noteIdx, loop) => {\n      if (this._container.muted) {\n        return;\n      }\n      const note = notes[noteIdx];\n      if (!note) {\n        return;\n      }\n      const value = note.value;\n      const promises = executeOnSingleOrMultiple(value, async (_, idx) => {\n        return this._playNoteValue(notes, noteIdx, idx);\n      });\n      await (isArray(promises) ? Promise.allSettled(promises) : promises);\n      let nextNoteIdx = noteIdx + 1;\n      if (loop && nextNoteIdx >= notes.length) {\n        nextNoteIdx = nextNoteIdx % notes.length;\n      }\n      if (this._container.muted) {\n        return;\n      }\n      await this._playNote(notes, nextNoteIdx, loop);\n    };\n    this._playNoteValue = async (notes, noteIdx, valueIdx) => {\n      const note = notes[noteIdx];\n      if (!note) {\n        return;\n      }\n      const value = itemFromSingleOrMultiple(note.value, valueIdx, true);\n      try {\n        const freq = getNoteFrequency(value);\n        if (!isNumber(freq)) {\n          return;\n        }\n        await this._playFrequency(freq, note.duration);\n      } catch (e) {\n        getLogger().error(e);\n      }\n    };\n    this._removeAudioSource = source => {\n      source.stop();\n      source.disconnect();\n      this._audioSources.splice(this._audioSources.indexOf(source), 1);\n    };\n    this._unmute = () => {\n      const container = this._container,\n        options = container.actualOptions,\n        soundsOptions = options.sounds;\n      if (!soundsOptions) {\n        return;\n      }\n      if (!container.audioContext) {\n        container.audioContext = new AudioContext();\n      }\n      const {\n        audioContext\n      } = container;\n      if (!this._audioSources) {\n        this._audioSources = [];\n      }\n      const gain = audioContext.createGain();\n      gain.connect(audioContext.destination);\n      gain.gain.value = soundsOptions.volume.value / 100;\n      this._gain = gain;\n      this._initEvents();\n      this._engine.dispatchEvent(\"soundsUnmuted\", {\n        container: this._container\n      });\n    };\n    this._updateMuteIcons = () => {\n      const container = this._container,\n        muteImg = this._muteImg,\n        unmuteImg = this._unmuteImg;\n      if (muteImg) {\n        muteImg.style.display = container.muted ? \"block\" : \"none\";\n      }\n      if (unmuteImg) {\n        unmuteImg.style.display = container.muted ? \"none\" : \"block\";\n      }\n    };\n    this._updateMuteStatus = () => {\n      const container = this._container;\n      if (container.muted) {\n        this._mute();\n      } else {\n        this._unmute();\n        this._playMuteSound();\n      }\n    };\n    this._updateVolume = () => {\n      const container = this._container,\n        soundsOptions = container.actualOptions.sounds;\n      if (!soundsOptions?.enable) {\n        return;\n      }\n      clamp(this._volume, soundsOptions.volume.min, soundsOptions.volume.max);\n      let stateChanged = false;\n      if (this._volume <= 0 && !container.muted) {\n        this._volume = 0;\n        container.muted = true;\n        stateChanged = true;\n      } else if (this._volume > 0 && container.muted) {\n        container.muted = false;\n        stateChanged = true;\n      }\n      if (stateChanged) {\n        this._updateMuteIcons();\n        this._updateMuteStatus();\n      }\n      if (this._gain?.gain) {\n        this._gain.gain.value = this._volume / 100;\n      }\n    };\n    this._container = container;\n    this._engine = engine;\n    this._volume = 0;\n    this._audioSources = [];\n    this._audioMap = new Map();\n  }\n  async init() {\n    const container = this._container,\n      options = container.actualOptions,\n      soundsOptions = options.sounds;\n    if (!soundsOptions?.enable) {\n      return;\n    }\n    this._volume = soundsOptions.volume.value;\n    const events = soundsOptions.events;\n    this._audioMap = new Map();\n    for (const event of events) {\n      if (!event.audio) {\n        continue;\n      }\n      executeOnSingleOrMultiple(event.audio, async audio => {\n        const response = await fetch(audio.source);\n        if (!response.ok) {\n          return;\n        }\n        const arrayBuffer = await response.arrayBuffer();\n        container.audioContext = new AudioContext();\n        const audioBuffer = await container.audioContext.decodeAudioData(arrayBuffer);\n        this._audioMap.set(audio.source, audioBuffer);\n      });\n    }\n  }\n  async start() {\n    const container = this._container,\n      options = container.actualOptions,\n      soundsOptions = options.sounds;\n    if (!soundsOptions?.enable || !container.canvas.element) {\n      return;\n    }\n    container.muted = true;\n    const canvas = container.canvas.element,\n      pos = {\n        top: canvas.offsetTop,\n        right: canvas.offsetLeft + canvas.offsetWidth\n      },\n      {\n        mute,\n        unmute,\n        volumeDown,\n        volumeUp\n      } = soundsOptions.icons,\n      margin = 10;\n    const toggleMute = () => {\n      container.muted = !container.muted;\n      this._updateMuteIcons();\n      this._updateMuteStatus();\n    };\n    this._muteImg = initImage({\n      container,\n      options,\n      pos,\n      display: \"block\",\n      iconOptions: mute,\n      margin,\n      rightOffsets: [volumeDown.width, volumeUp.width],\n      clickCb: toggleMute\n    });\n    this._unmuteImg = initImage({\n      container,\n      options,\n      pos,\n      display: \"none\",\n      iconOptions: unmute,\n      margin,\n      rightOffsets: [volumeDown.width, volumeUp.width],\n      clickCb: toggleMute\n    });\n    this._volumeDownImg = initImage({\n      container,\n      options,\n      pos,\n      display: \"block\",\n      iconOptions: volumeDown,\n      margin,\n      rightOffsets: [volumeUp.width],\n      clickCb: () => {\n        if (container.muted) {\n          this._volume = 0;\n        }\n        this._volume -= soundsOptions.volume.step;\n        this._updateVolume();\n      }\n    });\n    this._volumeUpImg = initImage({\n      container,\n      options,\n      pos,\n      display: \"block\",\n      iconOptions: volumeUp,\n      margin,\n      rightOffsets: [],\n      clickCb: () => {\n        if (container.muted) {\n          this._volume = 0;\n        }\n        this._volume += soundsOptions.volume.step;\n        this._updateVolume();\n      }\n    });\n  }\n  stop() {\n    this._container.muted = true;\n    this._mute();\n    removeImage(this._muteImg);\n    removeImage(this._unmuteImg);\n    removeImage(this._volumeDownImg);\n    removeImage(this._volumeUpImg);\n  }\n}","map":{"version":3,"names":["clamp","executeOnSingleOrMultiple","getLogger","isArray","isNumber","itemFromArray","itemFromSingleOrMultiple","getNoteFrequency","initImage","data","img","document","createElement","clickCb","container","display","iconOptions","margin","options","pos","rightOffsets","width","path","svg","setIconStyle","top","right","length","reduce","a","b","fullScreen","zIndex","src","btoa","parent","canvas","element","parentNode","body","append","addEventListener","removeImage","image","remove","icon","left","style","userSelect","webkitUserSelect","position","SoundsInstance","constructor","engine","_addBuffer","audioCtx","buffer","createBufferSource","_audioSources","push","_addOscillator","oscillator","createOscillator","_initEvents","_container","soundsOptions","actualOptions","sounds","enable","event","events","cb","args","muted","destroyed","item","_engine","removeEventListener","filter","audio","_playBuffer","melodies","melody","Promise","allSettled","map","m","_playNote","notes","loop","note","_mute","audioContext","source","_removeAudioSource","_gain","disconnect","close","undefined","dispatchEvent","audioBuffer","_audioMap","get","connect","destination","start","_playFrequency","frequency","duration","type","value","resolve","setTimeout","_playMuteSound","gain","createGain","stop","noteIdx","promises","_","idx","_playNoteValue","nextNoteIdx","valueIdx","freq","e","error","splice","indexOf","_unmute","AudioContext","volume","_updateMuteIcons","muteImg","_muteImg","unmuteImg","_unmuteImg","_updateMuteStatus","_updateVolume","_volume","min","max","stateChanged","Map","init","response","fetch","ok","arrayBuffer","decodeAudioData","set","offsetTop","offsetLeft","offsetWidth","mute","unmute","volumeDown","volumeUp","icons","toggleMute","_volumeDownImg","step","_volumeUpImg"],"sources":["C:/happynewyear-react-js/hny/node_modules/tsparticles-plugin-sounds/esm/SoundsInstance.js"],"sourcesContent":["import { clamp, executeOnSingleOrMultiple, getLogger, isArray, isNumber, itemFromArray, itemFromSingleOrMultiple, } from \"tsparticles-engine\";\nimport { getNoteFrequency } from \"./utils\";\nfunction initImage(data) {\n    const img = document.createElement(\"img\"), { clickCb, container, display, iconOptions, margin, options, pos, rightOffsets } = data, { width, path, svg } = iconOptions;\n    setIconStyle(img, pos.top + margin, pos.right - (margin * (rightOffsets.length + 1) + width + rightOffsets.reduce((a, b) => a + b, 0)), display, options.fullScreen.zIndex + 1, width, margin);\n    img.src = path ?? (svg ? `data:image/svg+xml;base64,${btoa(svg)}` : \"\");\n    const parent = container.canvas.element?.parentNode || document.body;\n    parent.append(img);\n    img.addEventListener(\"click\", clickCb);\n    return img;\n}\nfunction removeImage(image) {\n    if (!image) {\n        return;\n    }\n    image.remove();\n}\nfunction setIconStyle(icon, top, left, display, zIndex, width, margin) {\n    icon.style.userSelect = \"none\";\n    icon.style.webkitUserSelect = \"none\";\n    icon.style.position = \"absolute\";\n    icon.style.top = `${top + margin}px`;\n    icon.style.left = `${left - margin - width}px`;\n    icon.style.display = display;\n    icon.style.zIndex = `${zIndex + 1}`;\n}\nexport class SoundsInstance {\n    constructor(container, engine) {\n        this._addBuffer = (audioCtx) => {\n            const buffer = audioCtx.createBufferSource();\n            this._audioSources.push(buffer);\n            return buffer;\n        };\n        this._addOscillator = (audioCtx) => {\n            const oscillator = audioCtx.createOscillator();\n            this._audioSources.push(oscillator);\n            return oscillator;\n        };\n        this._initEvents = () => {\n            const container = this._container, soundsOptions = container.actualOptions.sounds;\n            if (!soundsOptions?.enable || !container.canvas.element) {\n                return;\n            }\n            for (const event of soundsOptions.events) {\n                const cb = async (args) => {\n                    if (this._container !== args.container) {\n                        return;\n                    }\n                    if (!this._container || this._container.muted || this._container.destroyed) {\n                        executeOnSingleOrMultiple(event.event, (item) => {\n                            this._engine.removeEventListener(item, cb);\n                        });\n                        return;\n                    }\n                    if (event.filter && !event.filter(args)) {\n                        return;\n                    }\n                    if (event.audio) {\n                        this._playBuffer(itemFromSingleOrMultiple(event.audio));\n                    }\n                    else if (event.melodies) {\n                        const melody = itemFromArray(event.melodies);\n                        if (melody.melodies.length) {\n                            await Promise.allSettled(melody.melodies.map((m) => this._playNote(m.notes, 0, melody.loop)));\n                        }\n                        else {\n                            await this._playNote(melody.notes, 0, melody.loop);\n                        }\n                    }\n                    else if (event.notes) {\n                        const note = itemFromArray(event.notes);\n                        await this._playNote([note], 0, false);\n                    }\n                };\n                executeOnSingleOrMultiple(event.event, (item) => {\n                    this._engine.addEventListener(item, cb);\n                });\n            }\n        };\n        this._mute = () => {\n            const container = this._container;\n            if (!container.audioContext) {\n                return;\n            }\n            for (const source of this._audioSources) {\n                this._removeAudioSource(source);\n            }\n            if (this._gain) {\n                this._gain.disconnect();\n            }\n            container.audioContext.close();\n            container.audioContext = undefined;\n            this._engine.dispatchEvent(\"soundsMuted\", { container: this._container });\n        };\n        this._playBuffer = (audio) => {\n            const audioBuffer = this._audioMap.get(audio.source);\n            if (!audioBuffer) {\n                return;\n            }\n            const audioCtx = this._container.audioContext;\n            if (!audioCtx) {\n                return;\n            }\n            const source = this._addBuffer(audioCtx);\n            source.loop = audio.loop;\n            source.buffer = audioBuffer;\n            source.connect(this._gain ?? audioCtx.destination);\n            source.start();\n        };\n        this._playFrequency = async (frequency, duration) => {\n            if (!this._container.audioContext || !this._gain) {\n                return;\n            }\n            const oscillator = this._addOscillator(this._container.audioContext);\n            oscillator.connect(this._gain);\n            oscillator.type = \"sine\";\n            oscillator.frequency.value = frequency;\n            oscillator.start();\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    this._removeAudioSource(oscillator);\n                    resolve();\n                }, duration);\n            });\n        };\n        this._playMuteSound = () => {\n            const container = this._container;\n            if (!container.audioContext) {\n                return;\n            }\n            const gain = container.audioContext.createGain();\n            gain.connect(container.audioContext.destination);\n            gain.gain.value = 0;\n            const oscillator = container.audioContext.createOscillator();\n            oscillator.connect(gain);\n            oscillator.type = \"sine\";\n            oscillator.frequency.value = 1;\n            oscillator.start();\n            setTimeout(() => {\n                oscillator.stop();\n                oscillator.disconnect();\n                gain.disconnect();\n            });\n        };\n        this._playNote = async (notes, noteIdx, loop) => {\n            if (this._container.muted) {\n                return;\n            }\n            const note = notes[noteIdx];\n            if (!note) {\n                return;\n            }\n            const value = note.value;\n            const promises = executeOnSingleOrMultiple(value, async (_, idx) => {\n                return this._playNoteValue(notes, noteIdx, idx);\n            });\n            await (isArray(promises) ? Promise.allSettled(promises) : promises);\n            let nextNoteIdx = noteIdx + 1;\n            if (loop && nextNoteIdx >= notes.length) {\n                nextNoteIdx = nextNoteIdx % notes.length;\n            }\n            if (this._container.muted) {\n                return;\n            }\n            await this._playNote(notes, nextNoteIdx, loop);\n        };\n        this._playNoteValue = async (notes, noteIdx, valueIdx) => {\n            const note = notes[noteIdx];\n            if (!note) {\n                return;\n            }\n            const value = itemFromSingleOrMultiple(note.value, valueIdx, true);\n            try {\n                const freq = getNoteFrequency(value);\n                if (!isNumber(freq)) {\n                    return;\n                }\n                await this._playFrequency(freq, note.duration);\n            }\n            catch (e) {\n                getLogger().error(e);\n            }\n        };\n        this._removeAudioSource = (source) => {\n            source.stop();\n            source.disconnect();\n            this._audioSources.splice(this._audioSources.indexOf(source), 1);\n        };\n        this._unmute = () => {\n            const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n            if (!soundsOptions) {\n                return;\n            }\n            if (!container.audioContext) {\n                container.audioContext = new AudioContext();\n            }\n            const { audioContext } = container;\n            if (!this._audioSources) {\n                this._audioSources = [];\n            }\n            const gain = audioContext.createGain();\n            gain.connect(audioContext.destination);\n            gain.gain.value = soundsOptions.volume.value / 100;\n            this._gain = gain;\n            this._initEvents();\n            this._engine.dispatchEvent(\"soundsUnmuted\", { container: this._container });\n        };\n        this._updateMuteIcons = () => {\n            const container = this._container, muteImg = this._muteImg, unmuteImg = this._unmuteImg;\n            if (muteImg) {\n                muteImg.style.display = container.muted ? \"block\" : \"none\";\n            }\n            if (unmuteImg) {\n                unmuteImg.style.display = container.muted ? \"none\" : \"block\";\n            }\n        };\n        this._updateMuteStatus = () => {\n            const container = this._container;\n            if (container.muted) {\n                this._mute();\n            }\n            else {\n                this._unmute();\n                this._playMuteSound();\n            }\n        };\n        this._updateVolume = () => {\n            const container = this._container, soundsOptions = container.actualOptions.sounds;\n            if (!soundsOptions?.enable) {\n                return;\n            }\n            clamp(this._volume, soundsOptions.volume.min, soundsOptions.volume.max);\n            let stateChanged = false;\n            if (this._volume <= 0 && !container.muted) {\n                this._volume = 0;\n                container.muted = true;\n                stateChanged = true;\n            }\n            else if (this._volume > 0 && container.muted) {\n                container.muted = false;\n                stateChanged = true;\n            }\n            if (stateChanged) {\n                this._updateMuteIcons();\n                this._updateMuteStatus();\n            }\n            if (this._gain?.gain) {\n                this._gain.gain.value = this._volume / 100;\n            }\n        };\n        this._container = container;\n        this._engine = engine;\n        this._volume = 0;\n        this._audioSources = [];\n        this._audioMap = new Map();\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n        if (!soundsOptions?.enable) {\n            return;\n        }\n        this._volume = soundsOptions.volume.value;\n        const events = soundsOptions.events;\n        this._audioMap = new Map();\n        for (const event of events) {\n            if (!event.audio) {\n                continue;\n            }\n            executeOnSingleOrMultiple(event.audio, async (audio) => {\n                const response = await fetch(audio.source);\n                if (!response.ok) {\n                    return;\n                }\n                const arrayBuffer = await response.arrayBuffer();\n                container.audioContext = new AudioContext();\n                const audioBuffer = await container.audioContext.decodeAudioData(arrayBuffer);\n                this._audioMap.set(audio.source, audioBuffer);\n            });\n        }\n    }\n    async start() {\n        const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n        if (!soundsOptions?.enable || !container.canvas.element) {\n            return;\n        }\n        container.muted = true;\n        const canvas = container.canvas.element, pos = {\n            top: canvas.offsetTop,\n            right: canvas.offsetLeft + canvas.offsetWidth,\n        }, { mute, unmute, volumeDown, volumeUp } = soundsOptions.icons, margin = 10;\n        const toggleMute = () => {\n            container.muted = !container.muted;\n            this._updateMuteIcons();\n            this._updateMuteStatus();\n        };\n        this._muteImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"block\",\n            iconOptions: mute,\n            margin,\n            rightOffsets: [volumeDown.width, volumeUp.width],\n            clickCb: toggleMute,\n        });\n        this._unmuteImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"none\",\n            iconOptions: unmute,\n            margin,\n            rightOffsets: [volumeDown.width, volumeUp.width],\n            clickCb: toggleMute,\n        });\n        this._volumeDownImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"block\",\n            iconOptions: volumeDown,\n            margin,\n            rightOffsets: [volumeUp.width],\n            clickCb: () => {\n                if (container.muted) {\n                    this._volume = 0;\n                }\n                this._volume -= soundsOptions.volume.step;\n                this._updateVolume();\n            },\n        });\n        this._volumeUpImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"block\",\n            iconOptions: volumeUp,\n            margin,\n            rightOffsets: [],\n            clickCb: () => {\n                if (container.muted) {\n                    this._volume = 0;\n                }\n                this._volume += soundsOptions.volume.step;\n                this._updateVolume();\n            },\n        });\n    }\n    stop() {\n        this._container.muted = true;\n        this._mute();\n        removeImage(this._muteImg);\n        removeImage(this._unmuteImg);\n        removeImage(this._volumeDownImg);\n        removeImage(this._volumeUpImg);\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,yBAAyB,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,wBAAwB,QAAS,oBAAoB;AAC7I,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,SAASC,SAASA,CAACC,IAAI,EAAE;EACrB,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAAE;MAAEC,OAAO;MAAEC,SAAS;MAAEC,OAAO;MAAEC,WAAW;MAAEC,MAAM;MAAEC,OAAO;MAAEC,GAAG;MAAEC;IAAa,CAAC,GAAGX,IAAI;IAAE;MAAEY,KAAK;MAAEC,IAAI;MAAEC;IAAI,CAAC,GAAGP,WAAW;EACtKQ,YAAY,CAACd,GAAG,EAAES,GAAG,CAACM,GAAG,GAAGR,MAAM,EAAEE,GAAG,CAACO,KAAK,IAAIT,MAAM,IAAIG,YAAY,CAACO,MAAM,GAAG,CAAC,CAAC,GAAGN,KAAK,GAAGD,YAAY,CAACQ,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEf,OAAO,EAAEG,OAAO,CAACa,UAAU,CAACC,MAAM,GAAG,CAAC,EAAEX,KAAK,EAAEJ,MAAM,CAAC;EAC9LP,GAAG,CAACuB,GAAG,GAAGX,IAAI,KAAKC,GAAG,GAAI,6BAA4BW,IAAI,CAACX,GAAG,CAAE,EAAC,GAAG,EAAE,CAAC;EACvE,MAAMY,MAAM,GAAGrB,SAAS,CAACsB,MAAM,CAACC,OAAO,EAAEC,UAAU,IAAI3B,QAAQ,CAAC4B,IAAI;EACpEJ,MAAM,CAACK,MAAM,CAAC9B,GAAG,CAAC;EAClBA,GAAG,CAAC+B,gBAAgB,CAAC,OAAO,EAAE5B,OAAO,CAAC;EACtC,OAAOH,GAAG;AACd;AACA,SAASgC,WAAWA,CAACC,KAAK,EAAE;EACxB,IAAI,CAACA,KAAK,EAAE;IACR;EACJ;EACAA,KAAK,CAACC,MAAM,CAAC,CAAC;AAClB;AACA,SAASpB,YAAYA,CAACqB,IAAI,EAAEpB,GAAG,EAAEqB,IAAI,EAAE/B,OAAO,EAAEiB,MAAM,EAAEX,KAAK,EAAEJ,MAAM,EAAE;EACnE4B,IAAI,CAACE,KAAK,CAACC,UAAU,GAAG,MAAM;EAC9BH,IAAI,CAACE,KAAK,CAACE,gBAAgB,GAAG,MAAM;EACpCJ,IAAI,CAACE,KAAK,CAACG,QAAQ,GAAG,UAAU;EAChCL,IAAI,CAACE,KAAK,CAACtB,GAAG,GAAI,GAAEA,GAAG,GAAGR,MAAO,IAAG;EACpC4B,IAAI,CAACE,KAAK,CAACD,IAAI,GAAI,GAAEA,IAAI,GAAG7B,MAAM,GAAGI,KAAM,IAAG;EAC9CwB,IAAI,CAACE,KAAK,CAAChC,OAAO,GAAGA,OAAO;EAC5B8B,IAAI,CAACE,KAAK,CAACf,MAAM,GAAI,GAAEA,MAAM,GAAG,CAAE,EAAC;AACvC;AACA,OAAO,MAAMmB,cAAc,CAAC;EACxBC,WAAWA,CAACtC,SAAS,EAAEuC,MAAM,EAAE;IAC3B,IAAI,CAACC,UAAU,GAAIC,QAAQ,IAAK;MAC5B,MAAMC,MAAM,GAAGD,QAAQ,CAACE,kBAAkB,CAAC,CAAC;MAC5C,IAAI,CAACC,aAAa,CAACC,IAAI,CAACH,MAAM,CAAC;MAC/B,OAAOA,MAAM;IACjB,CAAC;IACD,IAAI,CAACI,cAAc,GAAIL,QAAQ,IAAK;MAChC,MAAMM,UAAU,GAAGN,QAAQ,CAACO,gBAAgB,CAAC,CAAC;MAC9C,IAAI,CAACJ,aAAa,CAACC,IAAI,CAACE,UAAU,CAAC;MACnC,OAAOA,UAAU;IACrB,CAAC;IACD,IAAI,CAACE,WAAW,GAAG,MAAM;MACrB,MAAMjD,SAAS,GAAG,IAAI,CAACkD,UAAU;QAAEC,aAAa,GAAGnD,SAAS,CAACoD,aAAa,CAACC,MAAM;MACjF,IAAI,CAACF,aAAa,EAAEG,MAAM,IAAI,CAACtD,SAAS,CAACsB,MAAM,CAACC,OAAO,EAAE;QACrD;MACJ;MACA,KAAK,MAAMgC,KAAK,IAAIJ,aAAa,CAACK,MAAM,EAAE;QACtC,MAAMC,EAAE,GAAG,MAAOC,IAAI,IAAK;UACvB,IAAI,IAAI,CAACR,UAAU,KAAKQ,IAAI,CAAC1D,SAAS,EAAE;YACpC;UACJ;UACA,IAAI,CAAC,IAAI,CAACkD,UAAU,IAAI,IAAI,CAACA,UAAU,CAACS,KAAK,IAAI,IAAI,CAACT,UAAU,CAACU,SAAS,EAAE;YACxEzE,yBAAyB,CAACoE,KAAK,CAACA,KAAK,EAAGM,IAAI,IAAK;cAC7C,IAAI,CAACC,OAAO,CAACC,mBAAmB,CAACF,IAAI,EAAEJ,EAAE,CAAC;YAC9C,CAAC,CAAC;YACF;UACJ;UACA,IAAIF,KAAK,CAACS,MAAM,IAAI,CAACT,KAAK,CAACS,MAAM,CAACN,IAAI,CAAC,EAAE;YACrC;UACJ;UACA,IAAIH,KAAK,CAACU,KAAK,EAAE;YACb,IAAI,CAACC,WAAW,CAAC1E,wBAAwB,CAAC+D,KAAK,CAACU,KAAK,CAAC,CAAC;UAC3D,CAAC,MACI,IAAIV,KAAK,CAACY,QAAQ,EAAE;YACrB,MAAMC,MAAM,GAAG7E,aAAa,CAACgE,KAAK,CAACY,QAAQ,CAAC;YAC5C,IAAIC,MAAM,CAACD,QAAQ,CAACtD,MAAM,EAAE;cACxB,MAAMwD,OAAO,CAACC,UAAU,CAACF,MAAM,CAACD,QAAQ,CAACI,GAAG,CAAEC,CAAC,IAAK,IAAI,CAACC,SAAS,CAACD,CAAC,CAACE,KAAK,EAAE,CAAC,EAAEN,MAAM,CAACO,IAAI,CAAC,CAAC,CAAC;YACjG,CAAC,MACI;cACD,MAAM,IAAI,CAACF,SAAS,CAACL,MAAM,CAACM,KAAK,EAAE,CAAC,EAAEN,MAAM,CAACO,IAAI,CAAC;YACtD;UACJ,CAAC,MACI,IAAIpB,KAAK,CAACmB,KAAK,EAAE;YAClB,MAAME,IAAI,GAAGrF,aAAa,CAACgE,KAAK,CAACmB,KAAK,CAAC;YACvC,MAAM,IAAI,CAACD,SAAS,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;UAC1C;QACJ,CAAC;QACDzF,yBAAyB,CAACoE,KAAK,CAACA,KAAK,EAAGM,IAAI,IAAK;UAC7C,IAAI,CAACC,OAAO,CAACnC,gBAAgB,CAACkC,IAAI,EAAEJ,EAAE,CAAC;QAC3C,CAAC,CAAC;MACN;IACJ,CAAC;IACD,IAAI,CAACoB,KAAK,GAAG,MAAM;MACf,MAAM7E,SAAS,GAAG,IAAI,CAACkD,UAAU;MACjC,IAAI,CAAClD,SAAS,CAAC8E,YAAY,EAAE;QACzB;MACJ;MACA,KAAK,MAAMC,MAAM,IAAI,IAAI,CAACnC,aAAa,EAAE;QACrC,IAAI,CAACoC,kBAAkB,CAACD,MAAM,CAAC;MACnC;MACA,IAAI,IAAI,CAACE,KAAK,EAAE;QACZ,IAAI,CAACA,KAAK,CAACC,UAAU,CAAC,CAAC;MAC3B;MACAlF,SAAS,CAAC8E,YAAY,CAACK,KAAK,CAAC,CAAC;MAC9BnF,SAAS,CAAC8E,YAAY,GAAGM,SAAS;MAClC,IAAI,CAACtB,OAAO,CAACuB,aAAa,CAAC,aAAa,EAAE;QAAErF,SAAS,EAAE,IAAI,CAACkD;MAAW,CAAC,CAAC;IAC7E,CAAC;IACD,IAAI,CAACgB,WAAW,GAAID,KAAK,IAAK;MAC1B,MAAMqB,WAAW,GAAG,IAAI,CAACC,SAAS,CAACC,GAAG,CAACvB,KAAK,CAACc,MAAM,CAAC;MACpD,IAAI,CAACO,WAAW,EAAE;QACd;MACJ;MACA,MAAM7C,QAAQ,GAAG,IAAI,CAACS,UAAU,CAAC4B,YAAY;MAC7C,IAAI,CAACrC,QAAQ,EAAE;QACX;MACJ;MACA,MAAMsC,MAAM,GAAG,IAAI,CAACvC,UAAU,CAACC,QAAQ,CAAC;MACxCsC,MAAM,CAACJ,IAAI,GAAGV,KAAK,CAACU,IAAI;MACxBI,MAAM,CAACrC,MAAM,GAAG4C,WAAW;MAC3BP,MAAM,CAACU,OAAO,CAAC,IAAI,CAACR,KAAK,IAAIxC,QAAQ,CAACiD,WAAW,CAAC;MAClDX,MAAM,CAACY,KAAK,CAAC,CAAC;IAClB,CAAC;IACD,IAAI,CAACC,cAAc,GAAG,OAAOC,SAAS,EAAEC,QAAQ,KAAK;MACjD,IAAI,CAAC,IAAI,CAAC5C,UAAU,CAAC4B,YAAY,IAAI,CAAC,IAAI,CAACG,KAAK,EAAE;QAC9C;MACJ;MACA,MAAMlC,UAAU,GAAG,IAAI,CAACD,cAAc,CAAC,IAAI,CAACI,UAAU,CAAC4B,YAAY,CAAC;MACpE/B,UAAU,CAAC0C,OAAO,CAAC,IAAI,CAACR,KAAK,CAAC;MAC9BlC,UAAU,CAACgD,IAAI,GAAG,MAAM;MACxBhD,UAAU,CAAC8C,SAAS,CAACG,KAAK,GAAGH,SAAS;MACtC9C,UAAU,CAAC4C,KAAK,CAAC,CAAC;MAClB,OAAO,IAAItB,OAAO,CAAE4B,OAAO,IAAK;QAC5BC,UAAU,CAAC,MAAM;UACb,IAAI,CAAClB,kBAAkB,CAACjC,UAAU,CAAC;UACnCkD,OAAO,CAAC,CAAC;QACb,CAAC,EAAEH,QAAQ,CAAC;MAChB,CAAC,CAAC;IACN,CAAC;IACD,IAAI,CAACK,cAAc,GAAG,MAAM;MACxB,MAAMnG,SAAS,GAAG,IAAI,CAACkD,UAAU;MACjC,IAAI,CAAClD,SAAS,CAAC8E,YAAY,EAAE;QACzB;MACJ;MACA,MAAMsB,IAAI,GAAGpG,SAAS,CAAC8E,YAAY,CAACuB,UAAU,CAAC,CAAC;MAChDD,IAAI,CAACX,OAAO,CAACzF,SAAS,CAAC8E,YAAY,CAACY,WAAW,CAAC;MAChDU,IAAI,CAACA,IAAI,CAACJ,KAAK,GAAG,CAAC;MACnB,MAAMjD,UAAU,GAAG/C,SAAS,CAAC8E,YAAY,CAAC9B,gBAAgB,CAAC,CAAC;MAC5DD,UAAU,CAAC0C,OAAO,CAACW,IAAI,CAAC;MACxBrD,UAAU,CAACgD,IAAI,GAAG,MAAM;MACxBhD,UAAU,CAAC8C,SAAS,CAACG,KAAK,GAAG,CAAC;MAC9BjD,UAAU,CAAC4C,KAAK,CAAC,CAAC;MAClBO,UAAU,CAAC,MAAM;QACbnD,UAAU,CAACuD,IAAI,CAAC,CAAC;QACjBvD,UAAU,CAACmC,UAAU,CAAC,CAAC;QACvBkB,IAAI,CAAClB,UAAU,CAAC,CAAC;MACrB,CAAC,CAAC;IACN,CAAC;IACD,IAAI,CAACT,SAAS,GAAG,OAAOC,KAAK,EAAE6B,OAAO,EAAE5B,IAAI,KAAK;MAC7C,IAAI,IAAI,CAACzB,UAAU,CAACS,KAAK,EAAE;QACvB;MACJ;MACA,MAAMiB,IAAI,GAAGF,KAAK,CAAC6B,OAAO,CAAC;MAC3B,IAAI,CAAC3B,IAAI,EAAE;QACP;MACJ;MACA,MAAMoB,KAAK,GAAGpB,IAAI,CAACoB,KAAK;MACxB,MAAMQ,QAAQ,GAAGrH,yBAAyB,CAAC6G,KAAK,EAAE,OAAOS,CAAC,EAAEC,GAAG,KAAK;QAChE,OAAO,IAAI,CAACC,cAAc,CAACjC,KAAK,EAAE6B,OAAO,EAAEG,GAAG,CAAC;MACnD,CAAC,CAAC;MACF,OAAOrH,OAAO,CAACmH,QAAQ,CAAC,GAAGnC,OAAO,CAACC,UAAU,CAACkC,QAAQ,CAAC,GAAGA,QAAQ,CAAC;MACnE,IAAII,WAAW,GAAGL,OAAO,GAAG,CAAC;MAC7B,IAAI5B,IAAI,IAAIiC,WAAW,IAAIlC,KAAK,CAAC7D,MAAM,EAAE;QACrC+F,WAAW,GAAGA,WAAW,GAAGlC,KAAK,CAAC7D,MAAM;MAC5C;MACA,IAAI,IAAI,CAACqC,UAAU,CAACS,KAAK,EAAE;QACvB;MACJ;MACA,MAAM,IAAI,CAACc,SAAS,CAACC,KAAK,EAAEkC,WAAW,EAAEjC,IAAI,CAAC;IAClD,CAAC;IACD,IAAI,CAACgC,cAAc,GAAG,OAAOjC,KAAK,EAAE6B,OAAO,EAAEM,QAAQ,KAAK;MACtD,MAAMjC,IAAI,GAAGF,KAAK,CAAC6B,OAAO,CAAC;MAC3B,IAAI,CAAC3B,IAAI,EAAE;QACP;MACJ;MACA,MAAMoB,KAAK,GAAGxG,wBAAwB,CAACoF,IAAI,CAACoB,KAAK,EAAEa,QAAQ,EAAE,IAAI,CAAC;MAClE,IAAI;QACA,MAAMC,IAAI,GAAGrH,gBAAgB,CAACuG,KAAK,CAAC;QACpC,IAAI,CAAC1G,QAAQ,CAACwH,IAAI,CAAC,EAAE;UACjB;QACJ;QACA,MAAM,IAAI,CAAClB,cAAc,CAACkB,IAAI,EAAElC,IAAI,CAACkB,QAAQ,CAAC;MAClD,CAAC,CACD,OAAOiB,CAAC,EAAE;QACN3H,SAAS,CAAC,CAAC,CAAC4H,KAAK,CAACD,CAAC,CAAC;MACxB;IACJ,CAAC;IACD,IAAI,CAAC/B,kBAAkB,GAAID,MAAM,IAAK;MAClCA,MAAM,CAACuB,IAAI,CAAC,CAAC;MACbvB,MAAM,CAACG,UAAU,CAAC,CAAC;MACnB,IAAI,CAACtC,aAAa,CAACqE,MAAM,CAAC,IAAI,CAACrE,aAAa,CAACsE,OAAO,CAACnC,MAAM,CAAC,EAAE,CAAC,CAAC;IACpE,CAAC;IACD,IAAI,CAACoC,OAAO,GAAG,MAAM;MACjB,MAAMnH,SAAS,GAAG,IAAI,CAACkD,UAAU;QAAE9C,OAAO,GAAGJ,SAAS,CAACoD,aAAa;QAAED,aAAa,GAAG/C,OAAO,CAACiD,MAAM;MACpG,IAAI,CAACF,aAAa,EAAE;QAChB;MACJ;MACA,IAAI,CAACnD,SAAS,CAAC8E,YAAY,EAAE;QACzB9E,SAAS,CAAC8E,YAAY,GAAG,IAAIsC,YAAY,CAAC,CAAC;MAC/C;MACA,MAAM;QAAEtC;MAAa,CAAC,GAAG9E,SAAS;MAClC,IAAI,CAAC,IAAI,CAAC4C,aAAa,EAAE;QACrB,IAAI,CAACA,aAAa,GAAG,EAAE;MAC3B;MACA,MAAMwD,IAAI,GAAGtB,YAAY,CAACuB,UAAU,CAAC,CAAC;MACtCD,IAAI,CAACX,OAAO,CAACX,YAAY,CAACY,WAAW,CAAC;MACtCU,IAAI,CAACA,IAAI,CAACJ,KAAK,GAAG7C,aAAa,CAACkE,MAAM,CAACrB,KAAK,GAAG,GAAG;MAClD,IAAI,CAACf,KAAK,GAAGmB,IAAI;MACjB,IAAI,CAACnD,WAAW,CAAC,CAAC;MAClB,IAAI,CAACa,OAAO,CAACuB,aAAa,CAAC,eAAe,EAAE;QAAErF,SAAS,EAAE,IAAI,CAACkD;MAAW,CAAC,CAAC;IAC/E,CAAC;IACD,IAAI,CAACoE,gBAAgB,GAAG,MAAM;MAC1B,MAAMtH,SAAS,GAAG,IAAI,CAACkD,UAAU;QAAEqE,OAAO,GAAG,IAAI,CAACC,QAAQ;QAAEC,SAAS,GAAG,IAAI,CAACC,UAAU;MACvF,IAAIH,OAAO,EAAE;QACTA,OAAO,CAACtF,KAAK,CAAChC,OAAO,GAAGD,SAAS,CAAC2D,KAAK,GAAG,OAAO,GAAG,MAAM;MAC9D;MACA,IAAI8D,SAAS,EAAE;QACXA,SAAS,CAACxF,KAAK,CAAChC,OAAO,GAAGD,SAAS,CAAC2D,KAAK,GAAG,MAAM,GAAG,OAAO;MAChE;IACJ,CAAC;IACD,IAAI,CAACgE,iBAAiB,GAAG,MAAM;MAC3B,MAAM3H,SAAS,GAAG,IAAI,CAACkD,UAAU;MACjC,IAAIlD,SAAS,CAAC2D,KAAK,EAAE;QACjB,IAAI,CAACkB,KAAK,CAAC,CAAC;MAChB,CAAC,MACI;QACD,IAAI,CAACsC,OAAO,CAAC,CAAC;QACd,IAAI,CAAChB,cAAc,CAAC,CAAC;MACzB;IACJ,CAAC;IACD,IAAI,CAACyB,aAAa,GAAG,MAAM;MACvB,MAAM5H,SAAS,GAAG,IAAI,CAACkD,UAAU;QAAEC,aAAa,GAAGnD,SAAS,CAACoD,aAAa,CAACC,MAAM;MACjF,IAAI,CAACF,aAAa,EAAEG,MAAM,EAAE;QACxB;MACJ;MACApE,KAAK,CAAC,IAAI,CAAC2I,OAAO,EAAE1E,aAAa,CAACkE,MAAM,CAACS,GAAG,EAAE3E,aAAa,CAACkE,MAAM,CAACU,GAAG,CAAC;MACvE,IAAIC,YAAY,GAAG,KAAK;MACxB,IAAI,IAAI,CAACH,OAAO,IAAI,CAAC,IAAI,CAAC7H,SAAS,CAAC2D,KAAK,EAAE;QACvC,IAAI,CAACkE,OAAO,GAAG,CAAC;QAChB7H,SAAS,CAAC2D,KAAK,GAAG,IAAI;QACtBqE,YAAY,GAAG,IAAI;MACvB,CAAC,MACI,IAAI,IAAI,CAACH,OAAO,GAAG,CAAC,IAAI7H,SAAS,CAAC2D,KAAK,EAAE;QAC1C3D,SAAS,CAAC2D,KAAK,GAAG,KAAK;QACvBqE,YAAY,GAAG,IAAI;MACvB;MACA,IAAIA,YAAY,EAAE;QACd,IAAI,CAACV,gBAAgB,CAAC,CAAC;QACvB,IAAI,CAACK,iBAAiB,CAAC,CAAC;MAC5B;MACA,IAAI,IAAI,CAAC1C,KAAK,EAAEmB,IAAI,EAAE;QAClB,IAAI,CAACnB,KAAK,CAACmB,IAAI,CAACJ,KAAK,GAAG,IAAI,CAAC6B,OAAO,GAAG,GAAG;MAC9C;IACJ,CAAC;IACD,IAAI,CAAC3E,UAAU,GAAGlD,SAAS;IAC3B,IAAI,CAAC8D,OAAO,GAAGvB,MAAM;IACrB,IAAI,CAACsF,OAAO,GAAG,CAAC;IAChB,IAAI,CAACjF,aAAa,GAAG,EAAE;IACvB,IAAI,CAAC2C,SAAS,GAAG,IAAI0C,GAAG,CAAC,CAAC;EAC9B;EACA,MAAMC,IAAIA,CAAA,EAAG;IACT,MAAMlI,SAAS,GAAG,IAAI,CAACkD,UAAU;MAAE9C,OAAO,GAAGJ,SAAS,CAACoD,aAAa;MAAED,aAAa,GAAG/C,OAAO,CAACiD,MAAM;IACpG,IAAI,CAACF,aAAa,EAAEG,MAAM,EAAE;MACxB;IACJ;IACA,IAAI,CAACuE,OAAO,GAAG1E,aAAa,CAACkE,MAAM,CAACrB,KAAK;IACzC,MAAMxC,MAAM,GAAGL,aAAa,CAACK,MAAM;IACnC,IAAI,CAAC+B,SAAS,GAAG,IAAI0C,GAAG,CAAC,CAAC;IAC1B,KAAK,MAAM1E,KAAK,IAAIC,MAAM,EAAE;MACxB,IAAI,CAACD,KAAK,CAACU,KAAK,EAAE;QACd;MACJ;MACA9E,yBAAyB,CAACoE,KAAK,CAACU,KAAK,EAAE,MAAOA,KAAK,IAAK;QACpD,MAAMkE,QAAQ,GAAG,MAAMC,KAAK,CAACnE,KAAK,CAACc,MAAM,CAAC;QAC1C,IAAI,CAACoD,QAAQ,CAACE,EAAE,EAAE;UACd;QACJ;QACA,MAAMC,WAAW,GAAG,MAAMH,QAAQ,CAACG,WAAW,CAAC,CAAC;QAChDtI,SAAS,CAAC8E,YAAY,GAAG,IAAIsC,YAAY,CAAC,CAAC;QAC3C,MAAM9B,WAAW,GAAG,MAAMtF,SAAS,CAAC8E,YAAY,CAACyD,eAAe,CAACD,WAAW,CAAC;QAC7E,IAAI,CAAC/C,SAAS,CAACiD,GAAG,CAACvE,KAAK,CAACc,MAAM,EAAEO,WAAW,CAAC;MACjD,CAAC,CAAC;IACN;EACJ;EACA,MAAMK,KAAKA,CAAA,EAAG;IACV,MAAM3F,SAAS,GAAG,IAAI,CAACkD,UAAU;MAAE9C,OAAO,GAAGJ,SAAS,CAACoD,aAAa;MAAED,aAAa,GAAG/C,OAAO,CAACiD,MAAM;IACpG,IAAI,CAACF,aAAa,EAAEG,MAAM,IAAI,CAACtD,SAAS,CAACsB,MAAM,CAACC,OAAO,EAAE;MACrD;IACJ;IACAvB,SAAS,CAAC2D,KAAK,GAAG,IAAI;IACtB,MAAMrC,MAAM,GAAGtB,SAAS,CAACsB,MAAM,CAACC,OAAO;MAAElB,GAAG,GAAG;QAC3CM,GAAG,EAAEW,MAAM,CAACmH,SAAS;QACrB7H,KAAK,EAAEU,MAAM,CAACoH,UAAU,GAAGpH,MAAM,CAACqH;MACtC,CAAC;MAAE;QAAEC,IAAI;QAAEC,MAAM;QAAEC,UAAU;QAAEC;MAAS,CAAC,GAAG5F,aAAa,CAAC6F,KAAK;MAAE7I,MAAM,GAAG,EAAE;IAC5E,MAAM8I,UAAU,GAAGA,CAAA,KAAM;MACrBjJ,SAAS,CAAC2D,KAAK,GAAG,CAAC3D,SAAS,CAAC2D,KAAK;MAClC,IAAI,CAAC2D,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACK,iBAAiB,CAAC,CAAC;IAC5B,CAAC;IACD,IAAI,CAACH,QAAQ,GAAG9H,SAAS,CAAC;MACtBM,SAAS;MACTI,OAAO;MACPC,GAAG;MACHJ,OAAO,EAAE,OAAO;MAChBC,WAAW,EAAE0I,IAAI;MACjBzI,MAAM;MACNG,YAAY,EAAE,CAACwI,UAAU,CAACvI,KAAK,EAAEwI,QAAQ,CAACxI,KAAK,CAAC;MAChDR,OAAO,EAAEkJ;IACb,CAAC,CAAC;IACF,IAAI,CAACvB,UAAU,GAAGhI,SAAS,CAAC;MACxBM,SAAS;MACTI,OAAO;MACPC,GAAG;MACHJ,OAAO,EAAE,MAAM;MACfC,WAAW,EAAE2I,MAAM;MACnB1I,MAAM;MACNG,YAAY,EAAE,CAACwI,UAAU,CAACvI,KAAK,EAAEwI,QAAQ,CAACxI,KAAK,CAAC;MAChDR,OAAO,EAAEkJ;IACb,CAAC,CAAC;IACF,IAAI,CAACC,cAAc,GAAGxJ,SAAS,CAAC;MAC5BM,SAAS;MACTI,OAAO;MACPC,GAAG;MACHJ,OAAO,EAAE,OAAO;MAChBC,WAAW,EAAE4I,UAAU;MACvB3I,MAAM;MACNG,YAAY,EAAE,CAACyI,QAAQ,CAACxI,KAAK,CAAC;MAC9BR,OAAO,EAAEA,CAAA,KAAM;QACX,IAAIC,SAAS,CAAC2D,KAAK,EAAE;UACjB,IAAI,CAACkE,OAAO,GAAG,CAAC;QACpB;QACA,IAAI,CAACA,OAAO,IAAI1E,aAAa,CAACkE,MAAM,CAAC8B,IAAI;QACzC,IAAI,CAACvB,aAAa,CAAC,CAAC;MACxB;IACJ,CAAC,CAAC;IACF,IAAI,CAACwB,YAAY,GAAG1J,SAAS,CAAC;MAC1BM,SAAS;MACTI,OAAO;MACPC,GAAG;MACHJ,OAAO,EAAE,OAAO;MAChBC,WAAW,EAAE6I,QAAQ;MACrB5I,MAAM;MACNG,YAAY,EAAE,EAAE;MAChBP,OAAO,EAAEA,CAAA,KAAM;QACX,IAAIC,SAAS,CAAC2D,KAAK,EAAE;UACjB,IAAI,CAACkE,OAAO,GAAG,CAAC;QACpB;QACA,IAAI,CAACA,OAAO,IAAI1E,aAAa,CAACkE,MAAM,CAAC8B,IAAI;QACzC,IAAI,CAACvB,aAAa,CAAC,CAAC;MACxB;IACJ,CAAC,CAAC;EACN;EACAtB,IAAIA,CAAA,EAAG;IACH,IAAI,CAACpD,UAAU,CAACS,KAAK,GAAG,IAAI;IAC5B,IAAI,CAACkB,KAAK,CAAC,CAAC;IACZjD,WAAW,CAAC,IAAI,CAAC4F,QAAQ,CAAC;IAC1B5F,WAAW,CAAC,IAAI,CAAC8F,UAAU,CAAC;IAC5B9F,WAAW,CAAC,IAAI,CAACsH,cAAc,CAAC;IAChCtH,WAAW,CAAC,IAAI,CAACwH,YAAY,CAAC;EAClC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}